@startuml Video error detector
scale 2

package serializable {
	abstract class Serializable<T> {
		data: Partial<T>
		+serialize(): T
		+getDataForSerialization(): T|void
		+{static} isSerializePath(serializePath: string): boolean
		+{static} write(serializable: Serializable, writePath: string): Promise<void>
		+{static} read(serializedPath: string): Promise<{data: SerializableData}>
	}
}

package metadata {
	abstract class Metadata extends Serializable {
		{abstract} get(path: string): string
	}

	class MediainfoMetadata extends Metadata {
		+_getTrack(trackType: string): unknown
		+_getProperty(trackType: string, property: string): string
		get(path: string): string
	}

	class MediainfoMetadataFactory {
		+{static} _readFromFileSystem(path: string): Promise<MiMetadataRaw>
		+{static} getFromFileSystem(path: string): Promise<MediainfoMetadata>
		+{static} getFromSerialized(serialized: MetadataData): MediainfoMetadata
	}

	MediainfoMetadataFactory --> MediainfoMetadata : creates
}

package fs-tree {
	class PathSorters {
		+{static} childrenBeforeParents(a: string, b: string): number
	}

	abstract class FsNode<T> extends Serializable {
		+path: string
		+size: number
	}

	class File extends FsNode {
		+mimeType: string
		+type: string
		+{static} getTypeFrom(mimeType: string): string
	}

	class Directory extends FsNode {
		+children: FsNode[]
		+getDataForSerialization(): DirectoryData
	}

	class FsTreeFactory {
		+{static} getTreeFromFileSystem(nodePath: string): Promise<FsNode>
		+{static} getTreeFromSerialized(data: SerializableData): FsNode
	}

	FsTreeFactory --> File : creates
	FsTreeFactory --> Directory : creates

	class FsTree {
		+{static} traverse(node: FsNode, nodeFn: (node: FsNode) => Promise<void>): Promise<void>
		+{static} traverseBfs(node: FsNode, nodeFn: (node: FsNode) => Promise<void>): Promise<void>
		+{static} find(node: FsNode, matchFn: (node: FsNode) => Promise<boolean>): Promise<FsNode[]>
		+{static} getSize(node: FsNode): Promise<number>
		+{static} getAsList(node: FsNode): Promise<FsNode[]>
		+{static} getAsSortedList(node: FsNode): Promise<FsNode[]>
	}

	FsTree --> FsNode
	FsTree --> Directory
	FsTree --> PathSorters
}

class MetadataCache extends Serializable{
	+rootNode: FsNode
	+metadata: Map<path: string, MediainfoMetadata>
}

@enduml
