@startuml Video error detector
scale 2

package filter {
	interface Condition<T> {
		+ path: string
		+ value: T
		+ toString(): string
		+ toStringForValue(inputValue: string): string
		+ check(inputValue: string): ConditionResult
	}

	abstract class Operator<T> implements Condition {
		+ {abstract} toString(): string
		+ {abstract} check(inputValue: string): ConditionResult
		+ {static} convertValue(value: unknown): ConvertedValue
	}

	class OperatorBetween extends Operator {}
	class OperatorEqual extends Operator {}
	class OperatorGreaterThanOrEqual extends Operator {}
	class OperatorIn extends Operator {}
	class OperatorLessThan extends Operator {}
	class OperatorNotEqual extends Operator {}

	class ConditionFactory {
		+ {static} _conditions: Map<string, Condition>();
		+ {static} getSharedInstanceFromSerialized(conditionData: ConditionSerialised): Condition
		+ {static} getFromSerialized(serialized: ConditionSerialised): Condition
	}

	ConditionFactory --> OperatorType
	ConditionFactory --> OperatorBetween : creates
	ConditionFactory --> OperatorEqual : creates
	ConditionFactory --> OperatorGreaterThanOrEqual : creates
	ConditionFactory --> OperatorIn : creates
	ConditionFactory --> OperatorLessThan : creates
	ConditionFactory --> OperatorNotEqual : creates

	enum OperatorType {
		BETWEEN
		IN
		EQUAL
		NOT_EQUAL
		LESS_THAN
		GREATER_THAN_OR_EQUAL
	}

	class ConditionResult {
		- condition: Condition;
		- value: unknown;
		- satisfied: ConditionSatisfied;
		+ isSatisfied: boolean;
		+ toString(): string
	}

	class Rule {
		+ readonly mimeType: string;
		# conditions: Condition[];
		+ checkRuleWithPathGetter(pathGetterFn: (path: string) => string): RuleResult|undefined
	}

	Rule --> Operator
	Rule --> RuleResult : creates

	class RuleFactory {
		+ {static} getFromSerialized(serialized: RuleSerialized): Rule
	}

	RuleFactory --> RuleType
	RuleFactory --> Rule : creates
	RuleFactory --> Condition
	RuleFactory --> ConditionFactory

	class RuleResult {
		- readonly conditionResults: ConditionResult[];
		+ satisfied(): boolean
		+ getResultsAsStrings(): string[]
		+ getScore(): number
		+ getWeightedScore(): number
	}

	RuleResult --> ConditionResult

	enum RuleType {
		DEFAULT
		METADATA
		SEASON_SIZE_DISCREPANCY
	}

	class FilterFactory {
		+ {static} async read(serializedPath: string): Promise<string>
		+ {static} async parse(serializedData: string): Promise<FilterSerialized>
		+ {static} getFromSerialized(serialized: FilterSerialized): Rule[]
	}

	FilterFactory --> Rule
	FilterFactory --> RuleFactory
}

package serializable {
	abstract class Serializable<T> {
		+serialize(): SerializableSerialized
		+{abstract} getDataForSerialization(): T
	}

	class SerializableIO {
		+{static} isSerializePath(serializePath: string): boolean
		+{static} write(serializable: Serializable, writePath: string): Promise<void>
		+{static} read(serializedPath: string): Promise<{data: SerializableSerialized}>
	}

	SerializableIO --> Serializable
}

package fs-tree {
	class PathSorters {
		+{static} childrenBeforeParents(a: string, b: string): number
	}

	abstract class FsNode<T> extends Serializable {
		+path: string
		#stats: FsNodeStats
		+size: number
	}

	class File extends FsNode {
		+mimeType: string
	}

	class Directory extends FsNode {}

	abstract class Tree<T> extends Serializable {
		-keyMapper: T => string
		#rootNode: T
		#nodes
		#relations
		+get root(): T
		+addRelation(fromNode: T, toNode: T): void
		+getDirectChildren(ofNode: T): T[]
		+traverse(nodeFn: (node: T) => Promise<void>, fromNode = this.rootNode): Promise<void>
		+traverseBfs(nodeFn: (node: T) => Promise<void>, fromNode = this.rootNode): Promise<void>
		+find(matchFn: (node: T) => Promise<boolean>, fromNode = this.rootNode): Promise<T[]>
		+getAsList(fromNode: T): Promise<T[]>
		+getAsListSync(): T[]
	}

	Tree "1..*" *-- TreeNodeT

	class FsTreeFactory {
		+ {static} async getTreeFromFileSystem(nodePath: string): Promise<FsTree>
		# {static} async getFsNodesFromFileSystem(nodePath: string): Promise<FsNode[]>
		# {static} async getFsNodeFromFileSystem(nodePath: string): Promise<[File|Directory, string[]]>
		+ {static} getTreeFromSerialized(serialized: SerializableSerialized): FsTree
		# {static} getFsNodesFromSerialized(serializeds: SerializableSerialized[]): FsNode[]
		# {static} getFsNodeFromSerialized(serialized: SerializableSerialized): File|Directory
		# {static} buildFsTreeFromSortedFsNodes(sortedNodes: FsNode[]): FsTree
	}

	FsTreeFactory --> FsTree : creates
	FsTreeFactory --> FsNode : creates
	FsTreeFactory --> File : creates
	FsTreeFactory --> Directory : creates

	class FsTree extends Tree {
		+getSize(node: FsNode): Promise<number>
		+getAsSortedList(node: FsNode): Promise<FsNode[]>
		+getAsSortedListSync(): FsNode[]
	}

	FsTree "1..*" *-- FsNode
	FsTree --> PathSorters
}

package metadata {
	interface Metadata  {
		get(path: string): string
	}

	class MediainfoMetadata extends Serializable implements Metadata {
		+metadata: MediainfoMetadataRaw
		+getTrack(trackType: string): MiTrack
		+getProperty(trackType: string, property: string): string
	}

	class MediainfoMetadataFactory {
		+{static} _readFromFileSystem(path: string): Promise<MiMetadataRaw>
		+{static} getFromFileSystem(path: string): Promise<MediainfoMetadata>
		+{static} getFromSerialized(serialized: SerializableSerialized): MediainfoMetadata
	}

	MediainfoMetadataFactory --> MediainfoMetadata : creates

	class MetadataCache extends Serializable {
		+tree: FsTree
		-metadata: Map<path: string, MediainfoMetadata>
		+getMetadata(path: string): Metadata
	}

	MetadataCache --> Metadata
	MetadataCache "*" *-- MediainfoMetadata
	MetadataCache "1" *-- FsTree
}

@enduml
